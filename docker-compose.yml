version: '3.7'

x-container: &container
    restart: always

x-php-container: &php-container
    <<: *container
    user: 1000:1000
    env_file:
        - laravel.env
    links:
        - db
    volumes:
        - ./src:/application
    networks:
        - sellmo
    build:
        context: .
        dockerfile: docker/images/php/Dockerfile
        target: base
    environment: &php-container-environment
        APP_ENV: $APP_ENV
        APP_URL: $APP_URL
        DB_DATABASE: $DB_DATABASE
        DB_HOST: $DB_HOST
        DB_PASSWORD: $DB_PASSWORD
        DB_PORT: $DB_PORT
        DB_USERNAME: $DB_USERNAME

services:
    nginx:
        image: nginx:alpine
        volumes:
            - ./docker/nginx/certs:/etc/nginx/certs
            - ./docker/nginx:/etc/nginx/conf.d
            - ./src:/application
        expose:
            - 80
            - 443
        labels:
            - traefik.enable=true
            - traefik.http.routers.${COMPOSE_PROJECT_NAME:-sellmo}-nginx.tls=true
            - traefik.http.routers.${COMPOSE_PROJECT_NAME:-sellmo}-nginx.tls.certresolver=cloudflare-acme
            - traefik.http.routers.${COMPOSE_PROJECT_NAME:-sellmo}-nginx.rule=Host(`$VIRTUAL_HOST`) && PathPrefix(`/`)
            - traefik.http.routers.${COMPOSE_PROJECT_NAME:-sellmo}-nginx.entrypoints=https
            - traefik.http.services.${COMPOSE_PROJECT_NAME:-sellmo}-nginx.loadbalancer.server.port=443
            - traefik.http.services.${COMPOSE_PROJECT_NAME:-sellmo}-nginx.loadbalancer.server.scheme=https
            - traefik.http.routers.${COMPOSE_PROJECT_NAME:-sellmo}-nginx-http.rule=Host(`$VIRTUAL_HOST`) && PathPrefix(`/`)
            - traefik.http.routers.${COMPOSE_PROJECT_NAME:-sellmo}-nginx-http.entrypoints=http
            - traefik.http.routers.${COMPOSE_PROJECT_NAME:-sellmo}-nginx-http.middlewares=default-https-redirect@file
        profiles:
            - backend
        depends_on:
            php:
                condition: service_started
        networks:
            - sellmo
        links:
            - php
    php:
        <<: *php-container
        environment:
            <<: *php-container-environment
        profiles:
            - php-fpm
            - backend
        depends_on:
            init:
                condition: service_completed_successfully

    db:
        image: mysql
        container_name: db
        ports:
            - "3306:3306"
        environment:
            MYSQL_ROOT_PASSWORD: $DB_PASSWORD
            MYSQL_DATABASE: $DB_DATABASE
            MYSQL_USER: $DB_USERNAME
            MYSQL_PASSWORD: $DB_PASSWORD
            MYSQL_ALLOW_EMPTY_PASSWORD: 1
        volumes:
            - sellmo-db:/var/lib/mysql
        profiles:
            - backend
        networks:
            - sellmo
    init:
        <<: *php-container
        restart: "no"
        profiles:
            - init
        environment:
            <<: *php-container-environment
        entrypoint: bash
        command:
            - -xec
            - |-
                composer install --ansi --no-cache
                php artisan -n --ansi db:ready --timeout=30
                php artisan -n --ansi migrate --force
                php artisan -n --ansi cache:clear
                php artisan -n --ansi view:clear
                php artisan -n --ansi route:clear
                php artisan -n --ansi config:clear
                php artisan -n --ansi clear
                #test "$APP_ENV" != "production" || php artisan -n --ansi route:cache   # Build route cache (bootstrap/cache/routes-v7.php)
                #test "$APP_ENV" != "production" || php artisan -n --ansi config:cache  # Build configuration cache from config/* files to bootstrap/cache/config.php
        expose: []
        depends_on:
            db:
                condition: service_started
    redis:
        image: redis:5.0-alpine
        ports:
            - '6379:6379'
        volumes:
            - sellmo-redis:/data
        profiles:
            - backend
        networks:
            - sellmo
        healthcheck:
            retries: 3
            timeout: 5s
networks:
    sellmo:
        driver: bridge
volumes:
    certs:
    sellmo-db:
        driver: local
    sellmo-redis:
        driver: local
